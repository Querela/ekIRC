ToDo / ToThinkAbout:

#####
- central object which hosts all default object creation methods
    -> easy to override for all
    -> stored in IRCManager ?

    <- classes can also be overwritten ...


- frameworks
    - dependency injection (guice?) !
    - project lombok?
    - logging framework (log4j2?)


- define interfaces for all communications
    -> separate implementation from logic
    -> expose only logic needed for other classes
    -> 

    <- name collisions (IInterface, InterfaceImpl ...?)


- make event system for async events ? -> UI
    -> store allLists from EventListenerList in EventManager to allow multiple managers?
    <-> singleton vs. subclassing?
    - waiting for events? (event list?)
    - event group
    - asyc events - thread group store in events
    - / event contexts
    
    - events with only one listener / n-listeners


- make events for each server reply / bundle events in groups?
    <-> too many classes vs. run time checking/parsing of messages twice?
    - store/order events in sub packages?


#####
- IRCManager
    - how to connect to different networks? (same network multiple time)
    - reconnect ? (how)
    - store persistent information (channel, credentials (myIRCIdentity))
    - on disconnect create onConnect event handler for rejoining channels?


- IRCServerInfo
    - how to create / getter-setter (immutable?, builder?)


- IRCUser/IRCChannel
    - store what?


- IRCValidation?


- IRC Service registration -> ignore


- channel-user-relationship-map
    - ManyToManyMap like pircbotx ?
    - store channels in User? (information hiding, functionality)


#####
- server reply codes
    - store server reply codes in static final variables (constants) rather than enums?
    - enum with double number code -> lookup conflict
    - add all known numbers to enum -> no number lookup (how to do default with multiple?)
    - provide separate subclasses for server specific numbers
    - use literal server commands from command classes or from enum


- change 'null' value if nothing is present to default-objects? / skip null checks ...
    - empty-objects / static final ...


- add message length checking (construct message and the check length?)


- add command permission checking
    -> use annotations
    -> with enum values for modes ? EnumSet?


#####
